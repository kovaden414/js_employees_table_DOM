{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var showNotification = function showNotification(title, message, type) {\n        document.querySelectorAll(\".notification\").forEach(function(el) {\n            return el.remove();\n        });\n        var notification = document.createElement(\"div\");\n        notification.className = \"notification \".concat(type);\n        notification.setAttribute(\"data-qa\", \"notification\");\n        notification.innerHTML = '\\n      <span class=\"title\">'.concat(title, \"</span>\\n      <p>\").concat(message, \"</p>\\n    \");\n        document.body.appendChild(notification);\n        setTimeout(function() {\n            return notification.remove();\n        }, 3000);\n    };\n    var table = document.querySelector(\"table\");\n    var headers = table.querySelectorAll(\"th\");\n    var tbody = table.querySelector(\"tbody\");\n    var currentSortColumnIndex = null;\n    var isAscending = true;\n    headers.forEach(function(header, index) {\n        header.addEventListener(\"click\", function() {\n            if (currentSortColumnIndex === index) isAscending = !isAscending;\n            else {\n                currentSortColumnIndex = index;\n                isAscending = true;\n            }\n            var rows = Array.from(tbody.querySelectorAll(\"tr\"));\n            rows.sort(function(rowA, rowB) {\n                var cellA = rowA.children[index].textContent.trim();\n                var cellB = rowB.children[index].textContent.trim();\n                if (index === 4) {\n                    cellA = parseFloat(cellA.replace(/[$,]/g, \"\")) || 0;\n                    cellB = parseFloat(cellB.replace(/[$,]/g, \"\")) || 0;\n                }\n                var isNumeric = !isNaN(cellA) && !isNaN(cellB);\n                if (isNumeric) return isAscending ? cellA - cellB : cellB - cellA;\n                else return isAscending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);\n            });\n            tbody.innerHTML = \"\";\n            rows.forEach(function(row) {\n                return tbody.appendChild(row);\n            });\n        });\n    });\n    tbody.addEventListener(\"click\", function(e) {\n        var clickedRow = e.target.closest(\"tr\");\n        if (clickedRow) {\n            var activeRow = tbody.querySelector(\".active\");\n            if (activeRow) activeRow.classList.remove(\"active\");\n            clickedRow.classList.add(\"active\");\n        }\n    });\n    var form = document.createElement(\"form\");\n    document.body.appendChild(form);\n    form.className = \"new-employee-form\";\n    var fields = [\n        {\n            label: \"Name\",\n            name: \"name\",\n            type: \"text\",\n            dataQa: \"name\"\n        },\n        {\n            label: \"Position\",\n            name: \"position\",\n            type: \"text\",\n            dataQa: \"position\"\n        },\n        {\n            label: \"Age\",\n            name: \"age\",\n            type: \"number\",\n            dataQa: \"age\"\n        },\n        {\n            label: \"Salary\",\n            name: \"salary\",\n            type: \"number\",\n            dataQa: \"salary\"\n        }\n    ];\n    fields.forEach(function(param) {\n        var label = param.label, n = param.name, type = param.type, dataQa = param.dataQa;\n        var fieldLabel = document.createElement(\"label\");\n        fieldLabel.innerHTML = \"\".concat(label, ': <input name=\"').concat(n, '\" type=\"').concat(type, '\" data-qa=\"').concat(dataQa, '\" required>');\n        form.appendChild(fieldLabel);\n    });\n    var officeLabel = document.createElement(\"label\");\n    officeLabel.innerHTML = 'Office: <select name=\"office\" data-qa=\"office\" required>\\n    <option value=\"Tokyo\">Tokyo</option>\\n    <option value=\"Singapore\">Singapore</option>\\n    <option value=\"London\">London</option>\\n    <option value=\"New York\">New York</option>\\n    <option value=\"Edinburgh\">Edinburgh</option>\\n    <option value=\"San Francisco\">San Francisco</option>\\n  </select>';\n    form.appendChild(officeLabel);\n    var submitButton = document.createElement(\"button\");\n    submitButton.type = \"submit\";\n    submitButton.textContent = \"Save to table\";\n    form.appendChild(submitButton);\n    form.addEventListener(\"submit\", function(e) {\n        e.preventDefault();\n        var personName = form.name.value.trim();\n        var position = form.position.value.trim();\n        var office = form.office.value;\n        var age = parseInt(form.age.value, 10);\n        var salary = parseFloat(form.salary.value);\n        if (!personName || !position || !office || isNaN(age) || isNaN(salary)) {\n            showNotification(\"Error\", \"All fields are required.\", \"error\");\n            return;\n        }\n        if (personName.length < 4) {\n            showNotification(\"Error\", \"Name must be at least 4 characters long.\", \"error\");\n            return;\n        }\n        if (age < 18 || age > 90) {\n            showNotification(\"Error\", \"Age must be between 18 and 90.\", \"error\");\n            return;\n        }\n        if (isNaN(salary) || salary <= 0) {\n            showNotification(\"Error\", \"Salary must be a positive number.\", \"error\");\n            return;\n        }\n        var formattedSalary = \"\".concat(salary.toLocaleString(\"en-US\"));\n        var row = document.createElement(\"tr\");\n        row.innerHTML = \"\\n      <td>\".concat(personName, \"</td>\\n      <td>\").concat(position, \"</td>\\n      <td>\").concat(office, \"</td>\\n      <td>\").concat(age, \"</td>\\n      <td>$\").concat(formattedSalary, \"</td>\\n    \");\n        table.querySelector(\"tbody\").appendChild(row);\n        form.reset();\n        showNotification(\"Success\", \"Employee added successfully.\", \"success\");\n    });\n});\n\n//# sourceMappingURL=index.4c662304.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const table = document.querySelector('table');\n  const headers = table.querySelectorAll('th');\n  const tbody = table.querySelector('tbody');\n\n  let currentSortColumnIndex = null;\n  let isAscending = true;\n\n  headers.forEach((header, index) => {\n    header.addEventListener('click', () => {\n      if (currentSortColumnIndex === index) {\n        isAscending = !isAscending;\n      } else {\n        currentSortColumnIndex = index;\n        isAscending = true;\n      }\n\n      const rows = Array.from(tbody.querySelectorAll('tr'));\n\n      rows.sort((rowA, rowB) => {\n        let cellA = rowA.children[index].textContent.trim();\n        let cellB = rowB.children[index].textContent.trim();\n\n        if (index === 4) {\n          cellA = parseFloat(cellA.replace(/[$,]/g, '')) || 0;\n          cellB = parseFloat(cellB.replace(/[$,]/g, '')) || 0;\n        }\n\n        const isNumeric = !isNaN(cellA) && !isNaN(cellB);\n\n        if (isNumeric) {\n          return isAscending ? cellA - cellB : cellB - cellA;\n        } else {\n          return isAscending\n            ? cellA.localeCompare(cellB)\n            : cellB.localeCompare(cellA);\n        }\n      });\n\n      tbody.innerHTML = '';\n      rows.forEach((row) => tbody.appendChild(row));\n    });\n  });\n\n  tbody.addEventListener('click', (e) => {\n    const clickedRow = e.target.closest('tr');\n\n    if (clickedRow) {\n      const activeRow = tbody.querySelector('.active');\n\n      if (activeRow) {\n        activeRow.classList.remove('active');\n      }\n      clickedRow.classList.add('active');\n    }\n  });\n\n  const form = document.createElement('form');\n\n  document.body.appendChild(form);\n  form.className = 'new-employee-form';\n\n  const fields = [\n    {\n      label: 'Name',\n      name: 'name',\n      type: 'text',\n      dataQa: 'name',\n    },\n    {\n      label: 'Position',\n      name: 'position',\n      type: 'text',\n      dataQa: 'position',\n    },\n    {\n      label: 'Age',\n      name: 'age',\n      type: 'number',\n      dataQa: 'age',\n    },\n    {\n      label: 'Salary',\n      name: 'salary',\n      type: 'number',\n      dataQa: 'salary',\n    },\n  ];\n\n  fields.forEach(({ label, name: n, type, dataQa }) => {\n    const fieldLabel = document.createElement('label');\n\n    fieldLabel.innerHTML = `${label}: <input name=\"${n}\" type=\"${type}\" data-qa=\"${dataQa}\" required>`;\n    form.appendChild(fieldLabel);\n  });\n\n  const officeLabel = document.createElement('label');\n\n  officeLabel.innerHTML = `Office: <select name=\"office\" data-qa=\"office\" required>\n    <option value=\"Tokyo\">Tokyo</option>\n    <option value=\"Singapore\">Singapore</option>\n    <option value=\"London\">London</option>\n    <option value=\"New York\">New York</option>\n    <option value=\"Edinburgh\">Edinburgh</option>\n    <option value=\"San Francisco\">San Francisco</option>\n  </select>`;\n  form.appendChild(officeLabel);\n\n  const submitButton = document.createElement('button');\n\n  submitButton.type = 'submit';\n  submitButton.textContent = 'Save to table';\n  form.appendChild(submitButton);\n\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const personName = form.name.value.trim();\n    const position = form.position.value.trim();\n    const office = form.office.value;\n    const age = parseInt(form.age.value, 10);\n    const salary = parseFloat(form.salary.value);\n\n    if (!personName || !position || !office || isNaN(age) || isNaN(salary)) {\n      showNotification('Error', 'All fields are required.', 'error');\n\n      return;\n    }\n\n    if (personName.length < 4) {\n      showNotification(\n        'Error',\n        'Name must be at least 4 characters long.',\n        'error',\n      );\n\n      return;\n    }\n\n    if (age < 18 || age > 90) {\n      showNotification('Error', 'Age must be between 18 and 90.', 'error');\n\n      return;\n    }\n\n    if (isNaN(salary) || salary <= 0) {\n      showNotification('Error', 'Salary must be a positive number.', 'error');\n\n      return;\n    }\n\n    const formattedSalary = `${salary.toLocaleString('en-US')}`;\n    const row = document.createElement('tr');\n\n    row.innerHTML = `\n      <td>${personName}</td>\n      <td>${position}</td>\n      <td>${office}</td>\n      <td>${age}</td>\n      <td>$${formattedSalary}</td>\n    `;\n    table.querySelector('tbody').appendChild(row);\n\n    form.reset();\n\n    showNotification('Success', 'Employee added successfully.', 'success');\n  });\n\n  function showNotification(title, message, type) {\n    document.querySelectorAll('.notification').forEach((el) => el.remove());\n\n    const notification = document.createElement('div');\n\n    notification.className = `notification ${type}`;\n    notification.setAttribute('data-qa', 'notification');\n\n    notification.innerHTML = `\n      <span class=\"title\">${title}</span>\n      <p>${message}</p>\n    `;\n\n    document.body.appendChild(notification);\n\n    setTimeout(() => notification.remove(), 3000);\n  }\n});\n"],"names":["document","addEventListener","showNotification","title","message","type","querySelectorAll","forEach","el","remove","notification","createElement","className","concat","setAttribute","innerHTML","body","appendChild","setTimeout","table","querySelector","headers","tbody","currentSortColumnIndex","isAscending","header","index","rows","Array","from","sort","rowA","rowB","cellA","children","textContent","trim","cellB","parseFloat","replace","isNaN","localeCompare","row","e","clickedRow","target","closest","activeRow","classList","add","form","fields","label","name","dataQa","param","n","fieldLabel","officeLabel","submitButton","preventDefault","personName","value","position","office","age","parseInt","salary","length","formattedSalary","toLocaleString","reset"],"version":3,"file":"index.4c662304.js.map"}